diff -u -r coreutils-6.10/lib/xalloc.h coreutils-6.10-up/lib/xalloc.h
--- coreutils-6.10/lib/xalloc.h	2008-01-14 07:35:14.000000000 -0500
+++ coreutils-6.10-up/lib/xalloc.h	2016-07-06 03:00:02.000000000 -0400
@@ -44,6 +44,10 @@
    memory allocation failure.  */
 extern void xalloc_die (void) ATTRIBUTE_NORETURN;
 
+/*@
+assigns \result \from s;
+ensures \valid(((char*)\result)+(0..s));
+ */
 void *xmalloc (size_t s);
 void *xzalloc (size_t s);
 void *xcalloc (size_t n, size_t s);
diff -u -r coreutils-6.10/src/seq.c coreutils-6.10-up/src/seq.c
--- coreutils-6.10/src/seq.c	2007-11-25 08:23:31.000000000 -0500
+++ coreutils-6.10-up/src/seq.c	2016-07-06 03:00:02.000000000 -0400
@@ -182,6 +182,14 @@
    storage, and store into *LAYOUT a description of the output layout;
    otherwise, return NULL.  */
 
+//@ predicate is_format_content_valid(char *fmt, integer i ) = (0 <= i && \forall integer j;  0 <= j < i ==> fmt[j] != '\0') ;
+
+/*@
+   requires valid_read_string(fmt);
+   requires strlen(fmt) < SIZE_MAX - 1;
+   requires \valid(layout);
+   requires \valid_read(fmt+(0..strlen(fmt)+1)); //correction for slight innacuracy in valid_read_string
+*/
 static char const *
 long_double_format (char const *fmt, struct layout *layout)
 {
@@ -190,42 +198,68 @@
   size_t suffix_len = 0;
   size_t length_modifier_offset;
   bool has_L;
+  //@ assert it_is_all_valid: is_format_content_valid(fmt, strlen(fmt));
 
+  /*@
+    loop invariant is_format_content_valid(fmt, i) && 0 <= i <= strlen(fmt) && 0 <= prefix_len <= i;
+    loop assigns i, prefix_len ;
+   */
   for (i = 0; ! (fmt[i] == '%' && fmt[i + 1] != '%'); i += (fmt[i] == '%') + 1)
     if (fmt[i])
       prefix_len++;
     else
       return NULL;
-
+  
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
   i++;
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
+
   i += strspn (fmt + i, "-+#0 '");
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
   i += strspn (fmt + i, "0123456789");
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
   if (fmt[i] == '.')
     {
+      //@ assert i_in_range: 0 <= i <= strlen(fmt);
       i++;
+      //@ assert i_in_range: 0 <= i <= strlen(fmt);
       i += strspn (fmt + i, "0123456789");
+      //@ assert i_in_range: 0 <= i <= strlen(fmt);
     }
 
   length_modifier_offset = i;
+  //@ assert lmo_in_range: 0 <= length_modifier_offset <= strlen(fmt);
   has_L = (fmt[i] == 'L');
+  //@ assert assert7: has_L== \true ==> fmt[i] != '\0';
+  //@ assert assert8_1: has_L == \false ==> fmt[i-1] != '\0';
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
   i += has_L;
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
+   //@ assert assert9: has_L== \true ==> fmt[i-1] != '\0' ;
+   //@ assert assert10: has_L == \false ==> fmt[i-1] != '\0';
   if (! strchr ("efgaEFGA", fmt[i]))
     return NULL;
 
+  //@ assert i_in_range: 0 <= i <= strlen(fmt);
+  /*@
+    loop invariant 0 <= i <= strlen(fmt) && 0 <= suffix_len <= i;
+    loop assigns i, suffix_len ;
+   */
   for (i++; ! (fmt[i] == '%' && fmt[i + 1] != '%'); i += (fmt[i] == '%') + 1)
     if (fmt[i])
       suffix_len++;
     else
       {
-	size_t format_size = i + 1;
-	char *ldfmt = xmalloc (format_size + 1);
-	memcpy (ldfmt, fmt, length_modifier_offset);
-	ldfmt[length_modifier_offset] = 'L';
-	strcpy (ldfmt + length_modifier_offset + 1,
-		fmt + length_modifier_offset + has_L);
-	layout->prefix_len = prefix_len;
-	layout->suffix_len = suffix_len;
-	return ldfmt;
+    //@ assert i_gt_lmo: i >= length_modifier_offset;
+    size_t format_size = i + 1;
+    char *ldfmt = xmalloc (format_size + 1);
+    memcpy (ldfmt, fmt, length_modifier_offset);
+    ldfmt[length_modifier_offset] = 'L';
+    strcpy (ldfmt + length_modifier_offset + 1,
+        fmt + length_modifier_offset + has_L);
+    layout->prefix_len = prefix_len;
+    layout->suffix_len = suffix_len;
+    return ldfmt;
       }
 
   return NULL;
